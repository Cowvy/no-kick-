local MemCache = game:GetService("Stats"):GetTotalMemoryUsageMb();
function GenerateFakeMemory()
    local random = math.random(1, 2);
    local method = (random == 1 and "-") or "+";
    return (method == "-" and (MemCache - (random / math.random(100, 200)))) or (MemCache + (random / math.random(100, 200)));
end
local OldIndex = nil
local OldNameCall = nil
local function isInTable(table, value)
    for i, v in pairs(table) do
        if v == value then
            return true
        end
    end
    return false
end
OldNameCall = hookmetamethod(game, "__namecall", function(...)
        local method = getnamecallmethod()
        local args = {...}
    if not checkcaller() and tostring(method) == "GetTotalMemoryUsageMb" then
            return GenerateFakeMemory();
        end
        if isInTable({"Force_Flop", "Player_Dropping"}, tostring(args[1])) and tostring(method) == "FireServer" then
           return 
        end
        return OldNameCall(...)
    end
)
local GetTotalMemoryUsageMb;
GetTotalMemoryUsageMb = hookfunction(game:GetService("Stats").GetTotalMemoryUsageMb, function(Stats)
    return GenerateFakeMemory();
end)
